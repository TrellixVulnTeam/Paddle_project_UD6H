################################### 基础配置 ###################################
architecture: MaskRCNN    # 检测模型的名称
use_gpu: true   # 默认使用 GPU 运行，设为 False 时使用 CPU 运行
max_iters: 180000   # 最大迭代次数，而一个iter会运行batch_size * device_num张图片，一般batch_size为1时，1x迭代18万次，2x迭代36万次
snapshot_iter: 10000    # 模型保存间隔，如果训练时 eval 设置为True，会在保存后进行验证
log_smooth_window: 20   # 输出指定区间的平均结果，默认 20，即输出 20 次的平均结果
save_dir: output        # 训练权重的保存路径
pretrain_weights: https://paddle-imagenet-models-name.bj.bcebos.com/ResNet50_cos_pretrained.tar   # 模型的预训练权重，默认是从指定 url 下载
metric: COCO      # 验证模型的评测标准，可以选择 COCO 或者 VOC
weights: output/mask_rcnn_r50_fpn_1x/model_final    # 用于模型验证或测试的训练好的权重
num_classes: 81   # 用于训练或验证的数据集的类别数目,其中包含背景类，即 81 = 80 + 1（背景类）
###############################################################################

################################### 模型配置 ###################################
# Mask RCNN元结构，包括了以下主要组件, 具体细节可以参考[论文]( https://arxiv.org/abs/1703.06870)
MaskRCNN:
  backbone: ResNet
  fpn: FPN
  rpn_head: FPNRPNHead
  roi_extractor: FPNRoIAlign
  bbox_head: BBoxHead
  bbox_assigner: BBoxAssigner
  mask_assigner: MaskAssigner
  mask_head: MaskHead
  rpn_only: false

# 主干网络
ResNet:
  dcn_v2_stages: []     # 配置在哪些阶段加入可变性卷积，默认不添加
  depth: 50
  feature_maps: [2, 3, 4, 5]    # 主干网络返回的主要阶段特征用于FPN作进一步的特征融合，默认从[2,3,4,5]返回特征
  freeze_at: 2          # 是否在训练中固定某些权重，默认从第 2 阶段开始固定，即 resnet 的 stage 1
  freeze_norm: true     # 是否停止 norm layer 的梯度回传，默认 true
  norm_decay: 0.0       # norm layer的权重衰退值
  norm_type: affine_channel   # norm layer的类型, 可以选择 bn/sync_bn/affine_channel, 默认为 affine_channel
  variant: b            # ResNet模型的类型, 分为'a', 'b', 'c', 'd'四种, 默认使用'b'类型

# FPN多特征融合
FPN:
  has_extra_convs: false    # FPN使用的最高层特征后是否添加额外conv，默认false
  max_level: 6      # FPN使用主干网络最高层特征，默认是resnet第5阶段后添加额外卷积操作变<成了FPN的第6个，总共有5个阶段
  min_level: 2      # FPN使用主干网络最低层特征，默认是resnet第2阶段的输出
  norm_type: null   # FPN中使用 Norm 类型, bn/sync_bn/affine_channel/null, 默认不用null
  num_chan: 256     # FPN输出特征的通道数量, 默认是256
  spatial_scale: [0.03125, 0.0625, 0.125, 0.25]     # 特征图缩放比例, 默认是[0.03125, 0.0625, 0.125, 0.25]

# 检测第一阶段RPN
FPNRPNHead:
  anchor_start_size: 32     # FPN第一层特征生成 anchor 时，默认 anchor 尺寸 32
  num_classes: 1            # RPNHead 默认进行前背景二分类

  # 根据特征图尺寸，在特征图的每个位置生成 N 个大小、长宽比各不同 anchor
  # N = anchor_sizes * aspect_ratios
  # 具体实现参考[API](fluid.layers.anchor_generator)
  anchor_generator:
    aspect_ratios: [0.5, 1.0, 2.0]
    variance: [1.0, 1.0, 1.0, 1.0]

  max_level: 6
  min_level: 2
  num_chan: 256

  # 首先计算 Anchor 和 GT BBox 之间的 IoU，为每个 Anchor 匹配上 GT，
  # 然后根据阈值过滤掉 IoU 低的 Anchor，得到最终的 Anchor 及其 GT 进行 loss 计算
  # 具体实现参考[API](fluid.layers.rpn_target_assign)
  rpn_target_assign:
    rpn_batch_size_per_im: 256
    rpn_fg_fraction: 0.5
    rpn_negative_overlap: 0.3
    rpn_positive_overlap: 0.7
    rpn_straddle_thresh: 0.0

  # 首先取 topk 个分类分数高的 anchor
  # 然后通过NMS对这topk个anchor进行重叠度检测，对重叠高的两个anchor只保留得分高的
  # 训练和测试阶段主要区别在最后NMS保留的Anchor数目
  # 训练时输出2000个proposals，推理时输出1000个proposals
  # 具体实现参考[API](fluid.layers.generate_proposals)
  train_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 2000
    post_nms_top_n: 2000
  test_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 1000
    post_nms_top_n: 1000

# 对FPN每层执行RoIAlign后，然后合并输出结果，用于BBox Head计算
FPNRoIAlign:
  canconical_level: 4     # 用于抽取特征特征的FPN的层数，默认为4
  canonical_size: 224     # 用于抽取特征特征的FPN的特征图尺寸，默认为224
  max_level: 5    # 用于抽取特征特征的最高层FPN，默认是5
  min_level: 2    # 用于抽取特征特征的最底层FPN，默认是2
  sampling_ratio: 2       # roi extractor的采样率，默认为2
  box_resolution: 7       # 输出bbox的特征图尺寸，默认为7
  mask_resolution: 14     # 输出mask的特征图尺寸，默认为14

# 输出实例掩码的Head
MaskHead:
  dilation: 1       # 空洞率，默认为1
  conv_dim: 256     # 第一个卷积后输出的特征图通道数, 默认为256
  num_convs: 4      # 卷积的数量，FPN是4，其他为0，默认为0
  resolution: 28    # mask head输出的特征图尺寸，默认14
  num_classes: 81   # 输出的mask的类别，默认为81

# 求rpn生成的roi跟gt bbox之间的iou，然后根据阈值进行过滤，保留一定数量的roi
# 再根据gt bbox的标签，对roi进行标签赋值，即得到每个roi的类别
# 具体实现参考[API](fluid.layers.generate_proposal_labels)
BBoxAssigner:
  batch_size_per_im: 512
  bbox_reg_weights: [0.1, 0.1, 0.2, 0.2]
  bg_thresh_hi: 0.5
  bg_thresh_lo: 0.0
  fg_fraction: 0.25
  fg_thresh: 0.5

# 根据roi的label，选择前景，为其赋值mask label
# 具体实现参考[API](fluid.layers.generate_mask_labels)
MaskAssigner:
  resolution: 28
  num_classes: 81

# 输出检测框的Head
BBoxHead:
  head: TwoFCHead       # 在roi extractor和bbox head之间，插入两层FC，对特征做进一步学习
  # 通过NMS进行bbox过滤
  # 具体实现参考[API](fluid.layers.multiclass_nms)
  nms:
    keep_top_k: 100
    nms_threshold: 0.5
    score_threshold: 0.05

# 输出检测框之前，对特征进一步学习
TwoFCHead:
  mlp_dim: 1024        # FC输出的特征图通道数，默认是1024


#####################################训练配置#####################################
# 学习率配置
LearningRate:
  # 初始学习率, 一般情况下8卡gpu，batch size为2时设置为0.02
  # 可以根据具体情况，按比例调整
  # 比如说4卡V100，bs=2时，设置为0.01
  base_lr: 0.01
  # 学习率规划器
  # 具体实现参考[API](fluid.layers.piecewise_decay)
  schedulers:
  # 学习率衰减策略
  # 对于coco数据集，1个epoch大概需要7000个iter
  # if step < 120000:
  #    learning_rate = 0.1
  # elif 120000 <= step < 160000:
  #    learning_rate = 0.1 * 0.1
  # else:
  #    learning_rate = 0.1 * (0.1)**2
  - !PiecewiseDecay
    gamma: 0.1
    milestones: [120000, 160000]
  # 在训练开始时，调低学习率为base_lr * start_factor，然后逐步增长到base_lr，这个过程叫学习率热身，按照以下公式更新学习率
  # linear_step = end_lr - start_lr
  # lr = start_lr + linear_step * (global_step / warmup_steps)
  # 具体实现参考[API](fluid.layers.linear_lr_warmup)
  - !LinearWarmup
    start_factor: 0.3333333333333333
    steps: 500

OptimizerBuilder:
  # 默认使用SGD+Momentum进行训练
  # 具体实现参考[API](fluid.optimizer)
  optimizer:
    momentum: 0.9
    type: Momentum
  # 默认使用L2权重衰减正则化
  # 具体实现参考[API](fluid.regularizer)
  regularizer:
    factor: 0.0001
    type: L2

_READER_: 'mask_fpn_reader.yml'
