################################### 基础配置 ###################################
architecture: MaskRCNN    # 检测模型的名称
use_gpu: true     # 默认使用 GPU 运行，设为 False 时使用 CPU 运行
max_iters: 180000 # 最大迭代次数，而一个iter会运行batch_size * device_num张图片，一般batch_size为1时，1x迭代18万次，2x迭代36万次
snapshot_iter: 10000      # 模型保存间隔，如果训练时 eval 设置为True，会在保存后进行验证
log_smooth_window: 20     # 输出指定区间的平均结果，默认 20，即输出 20 次的平均结果
save_dir: output          # 训练权重的保存路径
pretrain_weights: https://paddle-imagenet-models-name.bj.bcebos.com/ResNet50_cos_pretrained.tar   # 模型的预训练权重，默认是从指定 url 下载
metric: COCO      # 验证模型的评测标准，可以选择 COCO 或者 VOC
weights: output/mask_rcnn_r50_1x/model_final    # 用于模型验证或测试的训练好的权重
num_classes: 81   # 用于训练或验证的数据集的类别数目,其中包含背景类，即 81 = 80 + 1（背景类）
###############################################################################

################################### 模型配置 ###################################
MaskRCNN:
  backbone: ResNet
  rpn_head: RPNHead
  roi_extractor: RoIAlign
  bbox_assigner: BBoxAssigner
  bbox_head: BBoxHead
  mask_assigner: MaskAssigner
  mask_head: MaskHead

# 主干网络
ResNet:
  norm_type: affine_channel
  norm_decay: 0.
  depth: 50   # ResNet深度，默认50
  feature_maps: 4
  freeze_at: 2    # 是否在训练中固定某些权重，默认从第2阶段开始固定，即resnet的stage 1

ResNetC5:
  depth: 50
  norm_type: affine_channel

RPNHead:
  anchor_generator:
    anchor_sizes: [32, 64, 128, 256, 512]
    aspect_ratios: [0.5, 1.0, 2.0]
    stride: [16.0, 16.0]
    variance: [1.0, 1.0, 1.0, 1.0]
  rpn_target_assign:
    rpn_batch_size_per_im: 256
    rpn_fg_fraction: 0.5
    rpn_negative_overlap: 0.3
    rpn_positive_overlap: 0.7
    rpn_straddle_thresh: 0.0
  train_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 12000
    post_nms_top_n: 2000
  test_proposal:
    min_size: 0.0
    nms_thresh: 0.7
    pre_nms_top_n: 6000
    post_nms_top_n: 1000

RoIAlign:
  resolution: 14
  spatial_scale: 0.0625
  sampling_ratio: 0

BBoxHead:
  head: ResNetC5
  nms:
    keep_top_k: 100
    nms_threshold: 0.5
    normalized: false
    score_threshold: 0.05

MaskHead:
  dilation: 1
  conv_dim: 256
  resolution: 14

BBoxAssigner:
  batch_size_per_im: 512
  bbox_reg_weights: [0.1, 0.1, 0.2, 0.2]
  bg_thresh_hi: 0.5
  bg_thresh_lo: 0.0
  fg_fraction: 0.25
  fg_thresh: 0.5

MaskAssigner:
  resolution: 14

LearningRate:
  base_lr: 0.01
  schedulers:
  - !PiecewiseDecay
    gamma: 0.1
    milestones: [120000, 160000]
  - !LinearWarmup
    start_factor: 0.3333333333333333
    steps: 500

OptimizerBuilder:
  optimizer:
    momentum: 0.9
    type: Momentum
  regularizer:
    factor: 0.0001
    type: L2

_READER_: 'mask_reader.yml'
